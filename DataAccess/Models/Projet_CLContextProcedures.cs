// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using DataAccess.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace DataAccess.Models
{
    public partial class Projet_CLContext
    {
        private IProjet_CLContextProcedures _procedures;

        public virtual IProjet_CLContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new Projet_CLContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IProjet_CLContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DecryptDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<EncryptDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GenerateNewIDResult>().HasNoKey().ToView(null);
        }
    }

    public partial class Projet_CLContextProcedures : IProjet_CLContextProcedures
    {
        private readonly Projet_CLContext _context;

        public Projet_CLContextProcedures(Projet_CLContext context)
        {
            _context = context;
        }

        public virtual List<DecryptDataResult> DecryptData(byte[] Data, string Key, OutputParameter<string> ReturnValue, OutputParameter<int> returnValue = null)
        {
            var parameterReturnValue = new SqlParameter
            {
                ParameterName = "ReturnValue",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ReturnValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Data",
                    Size = -1,
                    Value = Data ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "Key",
                    Size = 256,
                    Value = Key ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterReturnValue,
                parameterreturnValue,
            };
            var _ = _context.SqlQuery<DecryptDataResult>("EXEC @returnValue = [dbo].[DecryptData] @Data = @Data, @Key = @Key, @ReturnValue = @ReturnValue OUTPUT", sqlParameters);

            ReturnValue.SetValue(parameterReturnValue.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual List<EncryptDataResult> EncryptData(string Data, string Key, OutputParameter<byte[]> ReturnValue, OutputParameter<int> returnValue = null)
        {
            var parameterReturnValue = new SqlParameter
            {
                ParameterName = "ReturnValue",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ReturnValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarBinary,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Data",
                    Size = -1,
                    Value = Data ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Key",
                    Size = 256,
                    Value = Key ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterReturnValue,
                parameterreturnValue,
            };
            var _ = _context.SqlQuery<EncryptDataResult>("EXEC @returnValue = [dbo].[EncryptData] @Data = @Data, @Key = @Key, @ReturnValue = @ReturnValue OUTPUT", sqlParameters);

            ReturnValue.SetValue(parameterReturnValue.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual List<GenerateNewIDResult> GenerateNewID(string sequenceName, OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sequenceName",
                    Size = 200,
                    Value = sequenceName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = _context.SqlQuery<GenerateNewIDResult>("EXEC @returnValue = [dbo].[GenerateNewID] @sequenceName = @sequenceName", sqlParameters);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
