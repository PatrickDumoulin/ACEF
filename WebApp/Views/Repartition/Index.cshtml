@model WebApp.ViewModels.RepartitionViewModel

@{
    ViewData["Title"] = "Répartition des Interventions";
}

<link href="~/css/global/StatisticsUsers.css" rel="stylesheet" />

<div class="StatisticsUsers-container">
    <h1 class="StatisticsUsers-title">Répartition des Interventions</h1>
    <hr class="mb-5"/>

    <!-- Provenance par Référence -->
    <div class="StatisticsUsers-row">
        <div class="StatisticsUsers-col-md-6">
            <h3 class="StatisticsUsers-subtitle">Provenance par Référence</h3>
            <div class="StatisticsUsers-table-responsive">
                @if (Model.ReferenceDistribution != null && Model.ReferenceDistribution.Any())
                {
                    <table class="StatisticsUsers-table StatisticsUsers-table-bordered">
                        <thead>
                            <tr>
                                <th class="StatisticsUsers-th">Référence</th>
                                <th class="StatisticsUsers-th">Total</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.ReferenceDistribution)
                            {
                                <tr>
                                    <td class="StatisticsUsers-td">@item.ReferenceName</td>
                                    <td class="StatisticsUsers-td">@item.Count</td>
                                </tr>
                            }
                            <tr>
                                <td class="StatisticsUsers-td"><strong>Total</strong></td>
                                <td class="StatisticsUsers-td">@Model.ReferenceDistribution.Sum(x => x.Count)</td>
                            </tr>
                        </tbody>
                    </table>
                }
                else
                {
                    <p class="StatisticsUsers-text">Aucune donnée disponible.</p>
                }
            </div>
        </div>
        <div class="StatisticsUsers-col-md-6 StatisticsUsers-chart-wrapper">
            <div class="StatisticsUsers-chart-container">
                <canvas id="referenceChart"></canvas>
            </div>
        </div>
    </div>

    <!-- Détails pour Desjardins -->
    <div class="StatisticsUsers-row">
        <div class="StatisticsUsers-col-md-6">
            <h3 class="StatisticsUsers-subtitle">Détails pour Desjardins</h3>
            <div class="StatisticsUsers-table-responsive">
                @if (Model.DesjardinsDetails != null && Model.DesjardinsDetails.Any())
                {
                    <table class="StatisticsUsers-table StatisticsUsers-table-bordered">
                        <thead>
                            <tr>
                                <th class="StatisticsUsers-th">Banque</th>
                                <th class="StatisticsUsers-th">Total</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.DesjardinsDetails)
                            {
                                <tr>
                                    <td class="StatisticsUsers-td">@item.BankName</td>
                                    <td class="StatisticsUsers-td">@item.Count</td>
                                </tr>
                            }
                            <tr>
                                <td class="StatisticsUsers-td"><strong>Total</strong></td>
                                <td class="StatisticsUsers-td">@Model.DesjardinsDetails.Sum(x => x.Count)</td>
                            </tr>
                        </tbody>
                    </table>
                }
                else
                {
                    <p class="StatisticsUsers-text">Aucune banque Desjardins trouvée pour la période sélectionnée.</p>
                }
            </div>
        </div>
        <div class="StatisticsUsers-col-md-6 StatisticsUsers-chart-wrapper">
            <div class="StatisticsUsers-chart-container">
                <canvas id="desjardinsChart"></canvas>
            </div>
        </div>
    </div>

    <!-- Usager par Caisse -->
    <div class="StatisticsUsers-row">
        <div class="StatisticsUsers-col-md-6">
            <h3 class="StatisticsUsers-subtitle">Usager par Caisse</h3>
            <div class="StatisticsUsers-table-responsive">
                @if (Model.ClientsByBank != null && Model.ClientsByBank.Any())
                {
                    <table class="StatisticsUsers-table StatisticsUsers-table-bordered">
                        <thead>
                            <tr>
                                <th class="StatisticsUsers-th">Banque</th>
                                <th class="StatisticsUsers-th">Total</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.ClientsByBank)
                            {
                                <tr>
                                    <td class="StatisticsUsers-td">@item.BankName</td>
                                    <td class="StatisticsUsers-td">@item.Count</td>
                                </tr>
                            }
                            <tr>
                                <td class="StatisticsUsers-td"><strong>Total</strong></td>
                                <td class="StatisticsUsers-td">@Model.ClientsByBank.Sum(x => x.Count)</td>
                            </tr>
                        </tbody>
                    </table>
                }
                else
                {
                    <p class="StatisticsUsers-text">Aucune donnée disponible.</p>
                }
            </div>
        </div>
        <div class="StatisticsUsers-col-md-6 StatisticsUsers-chart-wrapper">
            <div class="StatisticsUsers-chart-container">
                <canvas id="clientsByBankChart"></canvas>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Fonction pour créer un graphique circulaire
        function createPieChart(canvasId, labels, data) {
            // Modifier les labels pour remplacer "Caisse " par "C. "
            var modifiedLabels = labels.map(function (label) {
                return label.replace(/^Caisse\s*/, 'C. '); // Remplace "Caisse " par "C. "
            });

            var ctx = document.getElementById(canvasId).getContext('2d');
            new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: modifiedLabels, // Utiliser les labels modifiés
                    datasets: [{
                        data: data,
                        backgroundColor: [
                            '#FF6384',
                            '#36A2EB',
                            '#FFCE56',
                            '#4BC0C0',
                            '#9966FF',
                            '#FF9F40'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                color: 'white',
                                font: {
                                    size: 12
                                },
                                padding: 10,
                                boxWidth: 20
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function (tooltipItem) {
                                    let sum = tooltipItem.dataset.data.reduce((a, b) => a + b, 0);
                                    let value = tooltipItem.raw;
                                    let percentage = (value / sum * 100).toFixed(2) + '%';
                                    return ` ${value} (${percentage})`;
                                }
                            }
                        }
                    },
                    layout: {
                        padding: {
                            right: 50
                        }
                    }
                }
            });
        }



        // Provenance par Référence
        var referenceLabels = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ReferenceDistribution?.Select(x => x.ReferenceName).ToArray()));
        var referenceData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ReferenceDistribution?.Select(x => x.Count).ToArray()));
        if (referenceLabels && referenceData) {
            createPieChart('referenceChart', referenceLabels, referenceData);
        }

        // Détails pour Desjardins
        var desjardinsLabels = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.DesjardinsDetails?.Select(x => x.BankName).ToArray()));
        var desjardinsData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.DesjardinsDetails?.Select(x => x.Count).ToArray()));
        if (desjardinsLabels && desjardinsData) {
            createPieChart('desjardinsChart', desjardinsLabels, desjardinsData);
        }

        // Usager par Caisse
        var clientsByBankLabels = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ClientsByBank?.Select(x => x.BankName).ToArray()));
        var clientsByBankData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ClientsByBank?.Select(x => x.Count).ToArray()));
        if (clientsByBankLabels && clientsByBankData) {
            createPieChart('clientsByBankChart', clientsByBankLabels, clientsByBankData);
        }
    });
</script>
